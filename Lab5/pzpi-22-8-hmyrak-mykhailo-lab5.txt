Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 





Лабораторна робота №5
з дисципліни: «Архітектура програмного забезпечення»
на тему «Розгортання програмної системи та демонстрація її роботи»
 



 
Виконав: 								
ст. гр. ПЗПІ-22-8							
Гмирак Михайло Дмитрович
                                                					


Перевірив:
Ст. в. Сокорчук І. П. 


Харків 2025

1 ІСТОРІЯ ЗМІН
Зміни в документі нотуються до таблиці 1.1.
     
     
Таблиця 1.1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
01.06.25
0.1
Створено розділ «Історія змін»
2
01.06.25
0.1
Створено розділ «Завдання»
3
01.06.25
0.1
Створено розділ «Опис виконаної роботи»
4
01.06.25
0.1
Створено розділ «Висновки»
5
01.06.25
0.1
Додано додаток А з посиланням на відеоролик
6
01.06.25
0.1
Додано додаток Б з програмним кодом
7
01.06.25
0.1
Додано додаток В з специфікацію REST
       
     

2 ЗАВДАННЯ
     
     
     Мета завдання – розгорнути повноцінний стек програмної системи та продемонструвати її роботу в усіх компонентах: серверній частині, веб-інтерфейсі, мобільному додатку та IoT-підсистемі. Продемонструвати, що всі частини системи працюють узгоджено, забезпечуючи ефективне управління бібліотечними процесами.
     
     
       
      
      
3 ОПИС ВИКОНАНОЇ РОБОТИ
     
     
     Програмна система реалізована на основі багаторівневої архітектури: серверна частина створена мовою C# із використанням фреймворка ASP.NET Core та зберігає дані в реляційній базі даних Microsoft SQL Server. 
     Веб-інтерфейс написано на TypeScript із використанням React та Create React App, а стилі та адаптивність забезпечені Material-UI (MUI); для маршрутизації застосовується react-router-dom, для інтернаціоналізації – i18next, а обробка дат виконується за допомогою бібліотеки date-fns. 
     Мобільний додаток розроблено на Kotlin із Jetpack Compose, архітектурою MVVM та використанням Retrofit і OkHttp для взаємодії з REST API. Завдяки такому поєднанню сучасних технологій система гарантує злагоджену роботу всіх компонентів у єдиному інформаційному просторі.Серверна частина розроблена на C# з використанням фреймворка ASP.NET Core, що дозволяє швидко налаштувати проєкт, забезпечити високу продуктивність та масштабованість. Логіка реалізована за архітектурним підходом MVC, завдяки чому чітко розділено модель даних, контролери та представлення, а кожен REST-ендпоінт обробляється окремим методом у відповідному контролері з використанням атрибутів [ApiController] та [Route]. 
     Для зберігання даних використовується реляційна база даних Microsoft SQL Server, що підтримує стандарт SQL і ефективно працює з великими обсягами інформації. Параметри підключення централізовано налаштовуються у файлі appsettings.json, а взаємодія з базою здійснюється через Entity Framework Core, яка автоматично генерує CRUD-операції та забезпечує міграції бази даних. Повний опис розгортання та АРІ знаходиться у додатку В.
     Інтеграція з IoT-підсистемою забезпечує безперервний збір і передавання показників умов зберігання з зовнішніх пристроїв. ESP32 зчитує дані з датчика температури та вологості DHT22, формує JSON-повідомлення з часовою міткою у форматі ISO 8601 і надсилає його через HTTP-протокол на сервер, де воно обробляється для подальшого аналізу й відображення у користувацьких інтерфейсах. Ці дані використовуються для моніторингу оптимальних умов зберігання книг та інших бібліотечних матеріалів, що є критично важливим для збереження їх стану та довговічності.
     Веб-клієнт виконано на базі React із застосуванням Create React App для швидкої збірки й гарячого перезапуску, що забезпечує плавну розробку й легке масштабування інтерфейсу. Компонентна архітектура дозволяє чітко відокремити бізнес-логіку від відображення: кожний екран (книги, читачі, особи, статистика, сенсори, користувачі) реалізований як окремий React-компонент із власним станом і ефектами, а маршрутизація між ними здійснюється за допомогою react-router-dom. Стилізація відбувається через Material-UI, що забезпечує адаптивний дизайн та готові компоненти для побудови інтерфейсу, а інтернаціоналізація реалізована через i18next із react-i18next та браузерним детектором мови для коректного відображення текстів. Для роботи з датами використовується date-fns, яка дозволяє форматувати й обробляти часові мітки у зручному для користувача вигляді. 
     Мобільний додаток розроблено на Kotlin із використанням Jetpack Compose, що забезпечує декларативний підхід до побудови UI та мінімізує кількість шаблонного коду. Архітектурно застосовано патерн MVVM: ViewModel керує бізнес-логікою та станом, а Compose-компоненти відповідають за відображення. Для мережевої взаємодії використано Retrofit із OkHttp, що дозволяє легко налаштовувати запити до REST API серверної частини та обробляти відповіді в JSON. Локальне зберігання даних здійснюється за допомогою SharedPreferences, що гарантує збереження критичних даних у офлайн-режимі. Інтернаціоналізація реалізована через ресурси рядків у strings.xml, що дозволяє легко додавати нові мовні версії. 
     Використані інструменти та технології: 
     - ASP.NET Core використовується для розробки серверної частини; 
     -  Entity Framework Core для роботи з базою даних; 
     - React та Create React App для побудови веб-інтерфейсу;
     - Material-UI для стилізації та готових компонентів;
     - react-router-dom для маршрутизації; 
     - i18next і react-i18next для інтернаціоналізації; 
     - moment та react-datetime для обробки дат і часу; 
     - Kotlin і Jetpack Compose для мобільного UI; 
     - MVVM, ViewModel для організації бізнес-логіки на мобільній стороні; 
     - Retrofit і OkHttp для HTTP-клієнта; 
     - Postman для тестування та відлагодження API; 
     - Git для управління версіями коду.
     
     
 

     
4 ВИСНОВКИ
     
     
     Протягом проєкту виконано повний цикл розробки: здійснено аналіз вимог до системи, спроектовано багаторівневу архітектуру та реалізовано кожен компонент — від серверного API на ASP.NET Core до веб-клієнта на React, мобільного додатку на Kotlin із Jetpack Compose, а також IoT-підсистеми для безперервного моніторингу умов зберігання цінних екземплярів книг. Запроваджено механізми інтернаціоналізації, захисту даних, що забезпечило стабільність і масштабованість рішення. В результаті створена єдина інформаційна платформа, здатна ефективно управляти бібліотечними процесами, що задовольняє поставлені завдання та готова до подальшого розширення.
     
     
     

ДОДАТОК А
Відеозапис
      
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/_FacMk2-HHE

Хронологічний опис відеозапису:
     00:00 Вступна частина
     На початку відео коротко представлено мету лабораторної роботи.
     00:42 Розгортання: серверна частина
     Налаштували серверну частину, встановили залежності та запустили API-сервер на локальному хості.
     01:46 Розгортання: мобільна частина
      Клонували репозиторій мобільного додатку та налаштували проект в Android Studio.
     02:55 Тестування мобільної частини
     Протестували основні функції мобільного додатку: авторизацію, роботу з книгами, читачами та статистикою.
     05:14 Розгортання: веб частина
     Клонували репозиторій та встановили npm-пакети і запустили React-додаток.
     05:51 Тестування веб частини
     Перевірили функціональність веб-інтерфейсу, включаючи авторизацію та роботу з даними.
     07:33 Завершення
     Подяка за перегляд та завершення відео.



ДОДАТОК Б
Програмний код
     
     
Б.1 Наповнення бази даних необхідними даними при запуску додатка
GitHub репозиторій: https://github.com/NureHmyrakMykhailo/apz-pzpi-22-8-hmyrak-mykhailo/blob/main/Lab5/pzpi-22-8-hmyrak-mykhailo-lab5/server/API_NET6/DatabaseVerifier.cs
     
      1 public static class DatabaseVerifier
      2 {
      3 
      4     public static void VerifyDatabase(libraryContext db)
      5     {
      6 
      7         // Check if there is at least one record in the Param table
      8         bool hasParams = db.Params.Any();
      9         if (hasParams)
      10        {
      11            Console.WriteLine("Database verification completed.");
      12        }
      13        else
      14        {
      15            Console.WriteLine("The Param table does not contain any records.
      16	Inserting a new record.");
      17 
      18            //db.Database.ExecuteSqlRaw("ALTER DATABASE CURRENT 
      19            COLLATE Cyrillic_General_CI_AI");
      20
      21            // Insert a new record with specified values
      22            var newParam = new Param
      23            {
      24                TempMax = 40,
      25                TempMin = 10,
      26                WetMax = 80,
      27                WetMin = 5
      28            };
      29 
      30            db.Params.Add(newParam);
      31            db.SaveChanges();
      32 
      33            Console.WriteLine("A new record has been inserted into the Param 
      34           table.");
      35
      36            // Insert a new admin user
      37            var adminUser = new User
      38            {
      39                Login = "admin",
      40                Email = "admin@example.com",
      41                PasswordHash = BCrypt.Net.BCrypt.HashPassword("12345"),
      42                Role = "Admin"
      43            };
      44 
      45            db.Users.Add(adminUser);
      46            db.SaveChanges();
      47 
      48            Console.WriteLine("Admin user has been inserted into the Users 
      49            table.");
      50 
      51            // Insert statuses
      52            var statuses = new List<Status>
      53                {
      54     new Status { StatusId = 1, Name = "Поступила" },
      55     new Status { StatusId = 2, Name = "Видана" },
      56     new Status { StatusId = 3, Name = "Повернута" },
      57     new Status { StatusId = 4, Name = "До архиву" },
      58     new Status { StatusId = 5, Name = "З архиву" },
      59     new Status { StatusId = 6, Name = "Коментар" },
      60     new Status { StatusId = 7, Name = "Списана" },
      61     new Status { StatusId = 8, Name = "Резерв" }
      62                };
      63 
      64            db.Statuses.AddRange(statuses);
      65            db.SaveChanges();
      66 
      67Console.WriteLine("Statuses have been inserted into the  Status 
      68            table.");
      69         }
      70    }
      71 
      72 }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК В
Специфікація API
     

     # API Документація для проєкту "Програмна системи для автоматизації роботи бібліотек"
     
     API забезпечує функціональність для управління бібліотечними процесами. Він дозволяє реєструвати, відстежувати та аналізувати книги, читачів та персоналії, забезпечуючи ефективне управління бібліотекою.
     
     ## Встановлення та налаштування
     
     ### Передумови
     
     Для взаємодії з проєктом необхідно встановити: 
     - [.NET SDK](https://dotnet.microsoft.com/) (версія 7.0 та вище)
     - [Visual Studio](https://visualstudio.microsoft.com/) (2022 або новіше)
     - [SQL Server](https://www.microsoft.com/en-us/sql-server/) (2019 або новіше)
     - [Entity Framework Core](https://docs.microsoft.com/en-us/ef/core/) (7.0 та вище)
     
     Веб?клієнт:
- Node.js (версія 18 та вище)
- Npm
- Create React App
- Браузер Chrome або Firefox

     Мобільний клієнт:
     - [Android Studio](https://developer.android.com/studio) (Chipmunk або новіше)
     - Android SDK (версія 31 та вище)
     - [Kotlin](https://kotlinlang.org/) (версія 1.8+)
     - Емулятор Android або реальний пристрій
     
     ### Крок 1: Клонування репозиторію
     
     Виконати клонування репозиторію на локальний комп'ютер:
     
     git clone https://github.com/NureHmyrakMykhailo/apz-pzpi-22-8-hmyrak-mykhailo/tree/main/Lab5
     
     ### Крок 2: Створення бази даних
     
     Створити базу даних з назвою "LibrarySystem". Таблиці автоматично створюються під час першого запуску завдяки міграціям Entity Framework Core.
     
     ### Крок 3: Запуск серверу
     
     В `appsettings.json` змінити рядок підключення до бази даних на свої власні дані:
     {
       "ConnectionStrings": {
         "DefaultConnection": "Server=localhost;Database=LibrarySystem;Trusted_Connection=True;"
       }
     }
     
     Перейдіть у кореневу директорію проєкту та виконайте команду запуску сервера:
     
     dotnet run
     
     Або відкрийте рішення в Visual Studio та запустіть проект.
     
     За умовчанням сервер доступний за адресою `http://localhost:5000`. Це можна змінити в файлі конфігурації (`appsettings.json`).
     
     ### Крок 4: Запуск веб-клієнта
     
     Перейдіть до каталогу веб-клієнта (папка `web-client` у корені репозиторію). Встановіть залежності командою:
     
     npm install
     
     Запустіть веб-інтерфейс у режимі розробки:
     
     npm start
     
     Після цього він буде доступний за адресою `http://localhost:3000`. 
     Для створення production-збірки скористайтеся:
     
     npm run build
     
     ### Крок 5: Запуск мобільного клієнта
     
     Відкрийте проект мобільного клієнта в Android Studio. Переконайтеся, що в `gradle.properties` або `BuildConfig` встановлено правильний `BASE_URL` (наприклад, `http://localhost:5000`). Запустіть емулятор або підключіть Android-пристрій і виконайте запуск конфігурації app. Після встановлення додаток автоматично з'єднається з REST API та відобразить актуальні дані.
     
     ### Крок 6: Налаштування автентифікації
     
     Для роботи з системою необхідно налаштувати автентифікацію. В `appsettings.json` встановіть параметри JWT:
     {
       "JwtSettings": {
         "SecretKey": "ваш_секретний_ключ",
         "Issuer": "ваш_іссуер",
         "Audience": "ваша_аудиторія",
         "ExpirationInMinutes": 60
       }
     }
     
     Після налаштування всіх компонентів система буде готова до використання. Користувачі зможуть авторизуватися через веб-інтерфейс або мобільний додаток, отримуючи доступ до відповідних функцій відповідно до їх ролей (адміністратор, бібліотекар, читач).

     1. BooksController API
     Маршрути
     Add Book
     POST '/api/books/admin/{userId}/add'
* Опис: Додає нову книгу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* title (String): Назва книги.
* author (String): Автор книги.
* categoryID (Long): Ідентифікатор категорії.
* isbn (String): ISBN книги.
* publicationDate (Date): Дата публікації.
* status (String): Статус доступності.
* Відповідь:
o 200 OK: Книга була успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Book By ID
     GET '/api/books/{bookID}'
* Опис: Отримує книгу за її унікальним ідентифікатором.
* Параметри запиту:
o Path:
* bookID (Long): Ідентифікатор книги.
* Відповідь:
o 200 OK: Книга знайдена.
o 404 Not Found: Книга не знайдена.
     Get All Books
     GET '/api/books'
* Опис: Отримує всі книги.
* Відповідь:
o 200 OK: Список всіх книг.
     Update Book
     PUT '/api/books/admin/{userId}/{bookID}'
* Опис: Оновлює дані книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* bookID (Long): Ідентифікатор книги.
o Body:
* title (String): Назва книги.
* author (String): Автор книги.
* categoryID (Long): Ідентифікатор категорії.
* isbn (String): ISBN книги.
* publicationDate (Date): Дата публікації.
* status (String): Статус доступності.
* Відповідь:
o 200 OK: Книга оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Книга не знайдена.
     Delete Book
     DELETE '/api/books/admin/{userId}/{bookID}'
* Опис: Видаляє книгу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* bookID (Long): Ідентифікатор книги.
* Відповідь:
o 204 No Content: Книга видалена.
o 404 Not Found: Книга не знайдена.
     
     2. ReadersController API
     Маршрути
     Add Reader
     POST '/api/readers/admin/{userId}/add'
* Опис: Додає нового читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* firstName (String): Ім'я читача.
* lastName (String): Прізвище читача.
* email (String): Електронна пошта читача.
* phone (String): Номер телефону читача.
* Відповідь:
o 200 OK: Читач був доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Reader By ID
     GET '/api/readers/{readerID}'
* Опис: Отримує читача за його ідентифікатором.
* Параметри запиту:
o Path:
* readerID (Long): Ідентифікатор читача.
* Відповідь:
o 200 OK: Читач знайдений.
o 404 Not Found: Читач не знайдений.
     Get All Readers
     GET '/api/readers'
* Опис: Отримує список всіх читачів.
* Відповідь:
o 200 OK: Список всіх читачів.
     Update Reader
     PUT '/api/readers/admin/{userId}/{readerID}'
* Опис: Оновлює дані читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* readerID (Long): Ідентифікатор читача.
o Body:
* firstName (String): Ім'я читача.
* lastName (String): Прізвище читача.
* email (String): Електронна пошта.
* phone (String): Номер телефону.
* Відповідь:
o 200 OK: Читач оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Читач не знайдений.
     Delete Reader
     DELETE '/api/readers/admin/{userId}/{readerID}'
* Опис: Видаляє читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* readerID (Long): Ідентифікатор читача.
* Відповідь:
o 204 No Content: Читач видалений.
o 404 Not Found: Читач не знайдений.

     3 ItemsController API
     Маршрути
     Add Item
     POST '/api/items/admin/{userId}/add'
* Опис: Додає новий екземпляр книги.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* bookId (Long): Ідентифікатор книги.
* statusId (Long): Ідентифікатор статусу книги.
* barcode (String): Штрих-код екземпляра книги.
* location (String): Місцезнаходження книги.
* dateAdded (Date): Дата додавання екземпляра.
* Відповідь:
o 200 OK: Екземпляр книги успішно доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Книга або статус не знайдені.
     Get Item By ID
     GET '/api/items/{itemID}'
* Опис: Отримує екземпляр книги за його ідентифікатором.
* Параметри запиту:
o Path:
* itemID (Long): Ідентифікатор екземпляра.
* Відповідь:
o 200 OK: Екземпляр знайдений.
o 404 Not Found: Екземпляр не знайдений.
     Get All Items
     GET '/api/items'
* Опис: Отримує список всіх екземплярів книг.
* Відповідь:
o 200 OK: Список всіх екземплярів книг.
     Update Item
     PUT '/api/items/admin/{userId}/{itemID}'
* Опис: Оновлює екземпляр книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* itemID (Long): Ідентифікатор екземпляра.
o Body:
* statusId (Long): Ідентифікатор нового статусу книги.
* location (String): Оновлене місцезнаходження книги.
* Відповідь:
o 200 OK: Екземпляр оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Екземпляр або статус не знайдені.
     Delete Item
     DELETE '/api/items/admin/{userId}/{itemID}'
* Опис: Видаляє екземпляр книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* itemID (Long): Ідентифікатор екземпляра.
* Відповідь:
o 204 No Content: Екземпляр видалено.
o 404 Not Found: Екземпляр не знайдений.

     4. CategoriesController API
     Маршрути
     Add Category
     POST '/api/categories/admin/{userId}/add'
* Опис: Додає нову категорію від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* name (String): Назва категорії.
* description (String): Опис категорії.
* Відповідь:
o 200 OK: Категорія була успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Category By ID
     GET '/api/categories/{categoryID}'
* Опис: Отримує категорію за її ідентифікатором.
* Параметри запиту:
o Path:
* categoryID (Long): Ідентифікатор категорії.
* Відповідь:
o 200 OK: Категорія знайдена.
o 404 Not Found: Категорія не знайдена.
     Get All Categories
     GET '/api/categories'
* Опис: Отримує список всіх категорій.
* Відповідь:
o 200 OK: Список всіх категорій.
     Update Category
     PUT '/api/categories/admin/{userId}/{categoryID}'
* Опис: Оновлює дані категорії від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* categoryID (Long): Ідентифікатор категорії.
o Body:
* name (String): Назва категорії.
* description (String): Опис категорії.
* Відповідь:
o 200 OK: Категорія оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Категорія не знайдена.
     Delete Category
     DELETE '/api/categories/admin/{userId}/{categoryID}'
* Опис: Видаляє категорію від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* categoryID (Long): Ідентифікатор категорії.
* Відповідь:
o 204 No Content: Категорія видалена.
o 404 Not Found: Категорія не знайдена.
     
     5. StatusesController API
     Маршрути
     Add Status
     POST '/api/statuses/admin/{userId}/add'
* Опис: Додає новий статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* statusName (String): Назва статусу.
* description (String): Опис статусу.
* Відповідь:
o 200 OK: Статус успішно доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Status By ID
     GET '/api/statuses/{statusID}'
* Опис: Отримує статус за його ідентифікатором.
* Параметри запиту:
o Path:
* statusID (Long): Ідентифікатор статусу.
* Відповідь:
o 200 OK: Статус знайдений.
o 404 Not Found: Статус не знайдений.
     Get All Statuses
     GET '/api/statuses'
* Опис: Отримує список всіх статусів.
* Відповідь:
o 200 OK: Список всіх статусів.
     Update Status
     PUT '/api/statuses/admin/{userId}/{statusID}'
* Опис: Оновлює статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* statusID (Long): Ідентифікатор статусу.
o Body:
* statusName (String): Назва статусу.
* description (String): Опис статусу.
* Відповідь:
o 200 OK: Статус оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Статус не знайдений.
     Delete Status
     DELETE '/api/statuses/admin/{userId}/{statusID}'
* Опис: Видаляє статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* statusID (Long): Ідентифікатор статусу.
* Відповідь:
o 204 No Content: Статус видалений.
o 404 Not Found: Статус не знайдений.
     
     6. UsersController API
     Маршрути
     Register User
     POST '/api/users/register'
* Опис: Реєструє нового користувача.
* Параметри запиту:
o Body:
* username (String): Ім'я користувача.
* email (String): Електронна пошта користувача.
* password (String): Пароль користувача.
* role (String): Роль користувача (наприклад, "admin", "reader").
* Відповідь:
o 200 OK: Користувач успішно зареєстрований.
o 400 Bad Request: Помилка у вхідних даних.
o 409 Conflict: Користувач з таким іменем або email вже існує.
     Login User
     POST '/api/users/login'
* Опис: Авторизує користувача.
* Параметри запиту:
o Body:
* username (String): Ім'я користувача.
* password (String): Пароль користувача.
* Відповідь:
o 200 OK: Авторизація успішна.
o 400 Bad Request: Помилка у вхідних даних.
o 401 Unauthorized: Невірний логін чи пароль.
     Get User By ID
     GET '/api/users/{userID}'
* Опис: Отримує користувача за його ідентифікатором.
* Параметри запиту:
o Path:
* userID (Long): Ідентифікатор користувача.
* Відповідь:
o 200 OK: Користувач знайдений.
o 404 Not Found: Користувач не знайдений.
     Get All Users
     GET '/api/users'
* Опис: Отримує список всіх користувачів.
* Відповідь:
o 200 OK: Список всіх користувачів.
     Update User
     PUT '/api/users/admin/{userId}/{userID}'
* Опис: Оновлює дані користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* userID (Long): Ідентифікатор користувача.
o Body:
* username (String): Ім'я користувача.
* email (String): Електронна пошта.
* role (String): Роль користувача.
* Відповідь:
o 200 OK: Користувач оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Користувач не знайдений.
     Delete User
     DELETE '/api/users/admin/{userId}/{userID}'
* Опис: Видаляє користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* userID (Long): Ідентифікатор користувача.
* Відповідь:
o 204 No Content: Користувач видалений.
o 404 Not Found: Користувач не знайдений.
     
     8. HistController API
     Маршрути
     Add History Record
     POST '/api/hist/admin/{userId}/add'
* Опис: Додає запис історії видачі книги.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* readerId (Long): Ідентифікатор читача.
* itemId (Long): Ідентифікатор екземпляра книги.
* borrowDate (Date): Дата видачі книги.
* returnDate (Date): Дата повернення книги.
* Відповідь:
o 200 OK: Запис успішно додано.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Читач або екземпляр не знайдені.
     Get History By ID
     GET '/api/hist/{histID}'
* Опис: Отримує запис історії видачі книги за його ідентифікатором.
* Параметри запиту:
o Path:
* histID (Long): Ідентифікатор запису.
* Відповідь:
o 200 OK: Запис знайдений.
o 404 Not Found: Запис не знайдений.
     Get All History
     GET '/api/hist'
* Опис: Отримує всі записи історії видачі книг.
* Відповідь:
o 200 OK: Список всіх записів.
     Update History Record
     PUT '/api/hist/admin/{userId}/{histID}'
* Опис: Оновлює запис історії видачі книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* histID (Long): Ідентифікатор запису.
o Body:
* returnDate (Date): Оновлена дата повернення книги.
* Відповідь:
o 200 OK: Запис оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Запис не знайдений.
     Delete History Record
     DELETE '/api/hist/admin/{userId}/{histID}'
* Опис: Видаляє запис історії видачі книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* histID (Long): Ідентифікатор запису.
* Відповідь:
o 204 No Content: Запис видалено.
o 404 Not Found: Запис не знайдений.
     
     9. PersonsController API
     Маршрути
     Add Person
     POST '/api/persons/admin/{userId}/add'
* Опис: Додає нову особу.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* firstName (String): Ім'я.
* lastName (String): Прізвище.
* dateOfBirth (Date): Дата народження.
* address (String): Адреса.
* email (String): Електронна пошта.
* Відповідь:
o 200 OK: Особа успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Person By ID
     GET '/api/persons/{personID}'
* Опис: Отримує особу за її ідентифікатором.
* Параметри запиту:
o Path:
* personID (Long): Ідентифікатор особи.
* Відповідь:
o 200 OK: Особа знайдена.
o 404 Not Found: Особа не знайдена.
     Get All Persons
     GET '/api/persons'
* Опис: Отримує список всіх осіб.
* Відповідь:
o 200 OK: Список всіх осіб.
     Update Person
     PUT '/api/persons/admin/{userId}/{personID}'
* Опис: Оновлює дані особи від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* personID (Long): Ідентифікатор особи.
o Body:
* firstName (String): Оновлене ім'я.
* lastName (String): Оновлене прізвище.
* dateOfBirth (Date): Оновлена дата народження.
* address (String): Оновлена адреса.
* email (String): Оновлена електронна пошта.
* Відповідь:
o 200 OK: Особа оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Особа не знайдена.
     Delete Person
     DELETE '/api/persons/admin/{userId}/{personID}'
* Опис: Видаляє особу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* personID (Long): Ідентифікатор особи.
* Відповідь:
o 204 No Content: Особа видалена.
o 404 Not Found: Особа не знайдена.
     RolesController API
     Маршрути
     Add Role
     POST '/api/roles/admin/{userId}/add'
* Опис: Додає нову роль користувача.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* roleName (String): Назва ролі.
* description (String): Опис ролі.
* Відповідь:
o 200 OK: Роль успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Role By ID
     GET '/api/roles/{roleID}'
* Опис: Отримує роль за її ідентифікатором.
* Параметри запиту:
o Path:
* roleID (Long): Ідентифікатор ролі.
* Відповідь:
o 200 OK: Роль знайдена.
o 404 Not Found: Роль не знайдена.
     Get All Roles
     GET '/api/roles'
* Опис: Отримує список всіх ролей.
* Відповідь:
o 200 OK: Список всіх ролей.
     Update Role
     PUT '/api/roles/admin/{userId}/{roleID}'
* Опис: Оновлює роль користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* roleID (Long): Ідентифікатор ролі.
o Body:
* roleName (String): Оновлена назва ролі.
* description (String): Оновлений опис ролі.
* Відповідь:
o 200 OK: Роль оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Роль не знайдена.
     Delete Role
     DELETE '/api/roles/admin/{userId}/{roleID}'
* Опис: Видаляє роль користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* roleID (Long): Ідентифікатор ролі.
* Відповідь:
o 204 No Content: Роль видалено.
o 404 Not Found: Роль не знайдена.
     

     
2


