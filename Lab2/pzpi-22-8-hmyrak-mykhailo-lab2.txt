Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 





Лабораторна робота №2
з дисципліни: «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури, створення та відлагодження програмного коду серверної частини програмної системи»
 



 
Виконав: 								
ст. гр. ПЗПІ-22-8							
Гмирак Михайло Дмитрович
                                                					

Перевірив:
Ст. в. Сокорчук І. П. 




Харків 2025
     2 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА
     ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
     2.1. Історія змін
     
     
     Зміни в документі нотуються до таблиці 2.1.
     
     Таблиця 2.1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
07.05.25
0.1
Створено розділ «Історія змін»
2
07.05.25
0.1
Створено розділ «Завдання»
3
07.05.25
0.1
Створено розділ «Опис виконаної роботи»
4
07.05.25
0.1
Створено розділ «Висновки»
5
07.05.25
0.1
Додано додаток А з посиланням на відеоролик
6
07.05.25
0.1
Додано додаток Б з графічними матеріалами
7
07.05.25
0.1
Додано додаток В з програмним кодом
8
07.05.25
0.1
Додано додаток Г з специфікацію REST
     
     
     2.2 Завдання
     
     
     	Мета завдання – розробити серверну (back-end) частину програмної системи, що забезпечує повноцінне управління даними користувачів, реалізацію бізнес-логіки, взаємодію з базою даних та зовнішніми сервісами, а також підтримує масштабування та безпеку. У рамках завдання необхідно спроєктувати архітектуру серверної частини, реалізувати REST API, обрати відповідні програмні технології, провести функціональне тестування та описати прийняті інженерні рішення.
     
     2.3 Опис виконаної роботи
     
     
     Програмна система є серверною частиною інформаційної системи для автоматизації роботи бібіліотек. Вона розроблена для забезпечення зберігання, обліку, обробки та контролю за книгами та пов’язаними з ними даними. Система підтримує два рівні доступу користувачів: звичайний та повний, кожен з яких має власний набір дозволених дій відповідно до ролі.
     Архітектура програмної системи реалізована відповідно до принципів багаторівневої архітектури (three-tier architecture), з чітким розділенням на:
     –	контролери (Controller): приймають HTTP-запити, викликають відповідні сервіси та повертають відповіді клієнту;
     –	сервіси (Service): реалізують бізнес-логіку та взаємодіють із репозиторіями;
     –	репозиторії (Repository): відповідають за доступ до бази даних, використовуючи ORM.
     Архітектурний стиль взаємодії між компонентами реалізований за допомогою REST API, що дозволяє зручно та стандартизовано обмінюватися даними з іншими системами або майбутніми клієнтськими застосунками (веб та мобільним інтерфейсом).
     Серверна частина побудована з використанням мові  C# та фреймворку ASP.NET Core, що забезпечує гнучкість, модульність та високу швидкість розробки. Основними модулями системи є:
     * Модуль управління книгами: Каталогізація та класифікація, управління екземплярами, відстеження статусів (наявність, видача)
     * Модуль користувачів: реєстрація/авторизація, рольова модель (читач, бібліотекар, адмін), профілі користувачів, історія видач
     * Модуль IoT-моніторингу: Збір даних з датчиків, аналіз умов зберігання, генерація попереджень
     * Модуль звітності: Статистика видач, аналіз популярності, формування стандартних звітів
     * Модуль резервування: Онлайн-бронювання 
     Завдяки гнучкій архітектурі та модульному підходу система легко піддається масштабуванню, забезпечує просте розширення функціональності, а також полегшує супровід і тестування. Кожен модуль логічно ізольований, проте здатен взаємодіяти з іншими через сервісний рівень.
     Математичні методи обробки даних використовуються під час повернення книг від користувача назад до бібліотеки. Система дозволяє оцінити середній час користування книгою. Це дозволяє зрозуміти, наскільки довго читачі утримують видані примірники, що корисно для аналітики попиту та оптимізації бібліотечного фонду.
     Середній час користування книгою обчислюється за формулою:
                                T_avg=  1/m ?_(j=1)^m??t_j^ret- t_j^out ?                                   (1)
     де T_avg  — середній час користування одним примірником, m — кількість завершених сесій видачі (тобто таких, де книгу вже повернуто), t_j^ret? — час повернення книги у j-й сесії, t_j^out? — час видачі книги у j-й сесії.
     Це дозволяє відслідковувати середню тривалість читання книг користувачами бібліотеки. У випадку значних відхилень від встановленого терміну користування система може автоматично генерувати попередження або рекомендації адміністрації.
     База даних проекту реалізована на Microsoft SQL Server і повністю відображає предметну область бібліотечного управління. Вона включає дванадцять основних таблиць, які відповідають основним модулям системи. Для кожної таблиці чітко визначено атрибути, типи даних, зв’язки з іншими таблицями, а також умови заповнення полів та обмеження цілісності даних. Нижче подано опис основних таблиць та їхніх полів.
     
     
     Ось перероблене формулювання з використанням маркованих списків у потрібному стилі (жирні крапки):
     Таблиця Readers (Читачі):
     * reader_id — унікальний ідентифікатор запису, генерується автоматично;
     * name — обов’язкове поле, рядок до 100 символів, не може бути пустим;
     * class — необов’язкове поле, рядок до 20 символів, може залишатися пустим;
     * student_card — необов’язкове поле, унікальний рядок до 20 символів, може бути пустим;
     * birthday — обов’язкове поле, дата, перевірка на коректність;
     * phone — обов’язкове поле, рядок до 15 символів, перевірка на формат номера;
     * email — обов’язкове поле, унікальний рядок до 50 символів, перевірка на формат e-mail;
     * address — необов’язкове поле, рядок до 200 символів, може залишатися пустим.
     Таблиця Books (Книги):
     * book_id — унікальний ідентифікатор запису, генерується автоматично;
     * title — обов’язкове поле, рядок до 200 символів, не може бути пустим;
     * isbn — необов’язкове поле, унікальний рядок до 13 символів, перевірка формату ISBN;
     * pages — обов’язкове поле, ціле число більше нуля;
     * publish — необов’язкове поле, рядок до 100 символів;
     * category_id — обов’язкове поле, зовнішній ключ до таблиці Categories;
     * class — необов’язкове поле, рядок до 20 символів;
     * lang — обов’язкове поле, рядок до 20 символів, не може бути пустим;
     * year — обов’язкове поле, ціле число, має бути в межах від 1901 до поточного року включно.
     Таблиця Categories (Категорії):
     * category_id — унікальний ідентифікатор запису, генерується автоматично;
     * name — обов’язкове поле, унікальний рядок до 50 символів, не може бути пустим.
     Таблиця Items (Екземпляри книг):
     * item_id — унікальний ідентифікатор запису, генерується автоматично;
     * book_id — обов’язкове поле, зовнішній ключ до таблиці Books, ON DELETE CASCADE;
     * reader_id — необов’язкове поле, зовнішній ключ до таблиці Readers, якщо книга не на полиці;
     * available — булевий тип, обов’язкове поле, за замовчуванням TRUE;
     * description — необов’язкове поле, рядок до 200 символів.
     Таблиця Hist (Історія видач):
     * hist_id — унікальний ідентифікатор запису, генерується автоматично;
     * time — обов’язкове поле, дата та час, значення за замовчуванням — поточна дата і час;
     * status_id — обов’язкове поле, зовнішній ключ до таблиці Statuses;
     * comment — необов’язкове поле, рядок до 200 символів;
     * item_id — обов’язкове поле, зовнішній ключ до таблиці Items;
     * reader_id — обов’язкове поле, зовнішній ключ до таблиці Readers.
     Таблиця Statuses (Статуси):
     * status_id — унікальний ідентифікатор запису, генерується автоматично;
     * name — обов’язкове поле, унікальний рядок до 20 символів, допустимі значення: "Видано", "Повернено", "Зарезервовано", "Втрачено".
     Таблиця Persons (Персони):
     * person_id — унікальний ідентифікатор запису, генерується автоматично;
     * name — обов’язкове поле, рядок до 100 символів, не може бути пустим;
     * date_of_birth — необов’язкове поле, дата;
     * date_of_death — необов’язкове поле, дата, має бути пізнішою за дату народження;
     * country — необов’язкове поле, рядок до 50 символів;
     * is_real — булевий тип, обов’язкове поле, за замовчуванням TRUE.
     Таблиця Roles (Ролі):
     * role_id — унікальний ідентифікатор запису, генерується автоматично;
     * name — обов’язкове поле, унікальний рядок до 20 символів, допустимі значення: "Автор", "Редактор", "Перекладач", "Ілюстратор".
     Таблиця Books_Persons (Зв'язок книг і персон):
     * book_id — обов’язкове поле, зовнішній ключ до таблиці Books, ON DELETE CASCADE;
     * person_id — обов’язкове поле, зовнішній ключ до таблиці Persons, ON DELETE CASCADE;
     * role_id — обов’язкове поле, зовнішній ключ до таблиці Roles;
     * первинний ключ — композитний: (book_id, person_id, role_id).
     Таблиця Users (Користувачі системи):
     * UserId — унікальний ідентифікатор запису типу UUID, генерується автоматично;
     * Login — обов’язкове поле, унікальний рядок до 30 символів;
     * Email — обов’язкове поле, унікальний рядок до 50 символів, перевірка формату e-mail;
     * PasswordHash — обов’язкове поле, рядок до 255 символів, не може бути пустим;
     * CreatedAt — обов’язкове поле, TIMESTAMP, значення за замовчуванням — поточна дата і час;
     * UpdatedAt — обов’язкове поле, TIMESTAMP, автоматичне оновлення при зміні запису;
     * Role — обов’язкове поле, ENUM: 'admin', 'librarian', 'assistant'.
     Таблиця Param (Параметри моніторингу):
     * id — унікальний ідентифікатор запису, генерується автоматично;
     * temp_max — обов’язкове поле, десяткове число (5,2);
     * temp_min — обов’язкове поле, десяткове число (5,2), менше за temp_max;
     * wet_max — обов’язкове поле, десяткове число (5,2);
     * wet_min — обов’язкове поле, десяткове число (5,2), менше за wet_max.
     Таблиця Climat_Monitor (Кліматичні дані):
     * id — унікальний ідентифікатор запису, генерується автоматично;
     * time — обов’язкове поле, дата та час, значення за замовчуванням — поточна дата і час;
     * temperature — обов’язкове поле, десяткове число (5,2);
     * wet — обов’язкове поле, десяткове число (5,2);
     * pressure — необов’язкове поле, десяткове число (7,2);
     * індекс за полем time — для прискорення пошуку за періодами.
     Специфікація REST знаходиться у додатку Г.
     У розробці серверної частини програмної системи для автоматизації роботи бібліотек використано сучасні, надійні та масштабовані технології, що забезпечують чітку архітектуру, безпеку та зручність супроводу проєкту.
     Технології розробки:
     * Мова програмування: C# — потужна, об'єктно-орієнтована мова з хорошою підтримкою інструментів для розробки веб-додатків.
     * Фреймворк: ASP.NET Core — кросплатформений фреймворк, що дозволяє створювати високопродуктивні REST API.
     * Архітектура: MVC (Model–View–Controller). Внутрішня структура Controller ? Service ? Repository дозволяє чітко розмежувати відповідальності та забезпечити масштабованість проєкту.
     * База даних: Microsoft SQL Server — надійна реляційна СУБД, яка підходить для зберігання структурованих даних бібліотеки (книги, читачі, позики, повернення, бронювання тощо).
     * ORM: Entity Framework Core — забезпечує об’єктно-реляційне відображення даних, дозволяє працювати з таблицями у вигляді C# класів.
     * Валідація: Data Annotations ([Required], [StringLength], [EmailAddress], [RegularExpression], [Range], тощо) — використовуються для перевірки даних на рівні моделей до виконання логіки.
     Основні компоненти реалізації:
     * Контролери(Controllers): Призначені для обробки HTTP-запитів. Для кожної сутності створено окремий контролер (наприклад, BooksController, ReadersController, LoansController) з методами CRUD.
     * Сервіси(Services): Містять бізнес-логіку
     * Репозиторії(Repositories): Інкапсулюють роботу з базою даних. Для кожної сутності створено окремий інтерфейс та реалізацію (IBookRepository, IReaderRepository тощо).
     * Моделі(Models/Entities): Відповідають таблицям у базі даних. Використовуються анотації для налаштування правил валідації та зберігання.
     Функціональне тестування проводилося з використанням Postman –популярного інструменту для роботи з API-запитами.
     
     
     
     2.4 Висновки 
      
      
     У ході виконання роботи було успішно реалізовано серверну частину інформаційної системи для автоматизації роботи бібліотек, яка побудована на основі багаторівневої архітектури з чітким розподілом обов’язків між компонентами. Розроблена система забезпечує надійне зберігання, обробку та контроль бібліотечних фондів, підтримує облік читачів, управління процесами видачі, повернення та бронювання літератури.
     Завдяки використанню фреймворку ASP.NET Core, ORM Entity Framework Core та СУБД MS SQL Server вдалося досягти високої продуктивності, надійності та масштабованості. Особливу увагу приділено модульності системи, валидації вхідних даних, контролю доступу на основі ролей, а також впровадженню стандартизованого REST API для подальшої інтеграції з іншими сервісами (наприклад, мобільним додатком або системою оповіщень).
     
     
     
     
     
     
     
     
     





Додаток А
ВІДЕОЗАПИС

Відеозапис доповіді на YouTube: https://youtu.be/AsOfxoTlrG4

Хронологічний опис доповіді:
00:00 Вступна частина
Доповідь розпочинається з короткого вступу
00:34 Тестування: книги
Розглядається тестування функціоналу, пов’язаного з додаванням, редагуванням та видаленням книг у системі, з перевіркою правильності збереження інформації в базі даних.
01:49 Тестування: екземпляри книг
Пояснюється, як тестуються окремі фізичні екземпляри книг — їх створення, ідентифікація та прив’язка до конкретної книги в системі.
02:47 Тестування: персони
Виконуються тести на додавання та зв’язок персон (авторів, видавців) із книгами, перевіряється, чи зберігаються всі зв’язки коректно та чи можна отримати інформацію про участь персони в створенні книги.
04:05 Тестування: користувачі
Демонструється перевірка процесу створення облікових записів користувачів, їх автентифікації, ролей та прав доступу в системі.
04:35 Тестування: читачі
Пояснюється тестування модуля читачів бібліотеки: збереження особистих даних, відображення історії видачі книг.
05:38 Тестування: додавання одразу багатьох екземплярів книги
Тестується функціонал, який дозволяє швидко створити кілька екземплярів однієї книги за один запит, перевіряється правильність їх генерації та облік у системі.
06:29 Тестування: Видача книги читачу
Демонструється тестовий процес видачі книги: перевірка наявності вільного екземпляра, запис у журнал видачі, оновлення статусу книги.
07:28 Тестування: Повернення книги назад до бібліотеки
Описується, як тестується повернення книги — зміна статусу екземпляра, видалення чи оновлення запису у журналі, оновлення статистики користування.
08:11 Тестування: Отримання математично оброблених статистичних даних
Проводиться перевірка функцій аналітики: обчислення кількості виданих книг, активних читачів, популярних жанрів.

     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     



Додаток Б
Графічні матеріали


     Рисунок Б.1 - UML діаграма розгортання (Deployment Diagram)


     Рисунок Б.2 –  UML діаграма прецедентів  (Use Case Diagram)
     

     
     Рисунок Б.3 – ER-модель даних (Entity–Relationship Model)
     
     
     Рисунок Б.4 - UML діаграма взаємодії (Interaction Overview Diagram)
     
     Додаток В
     Програмний код
     
     В.1 Математична обробка прикладних даних
     Репозиторій: https://github.com/NureHmyrakMykhailo/apz-pzpi-22-8-hmyrak-mykhailo/blob/main/Lab2/pzpi-22-8-hmyrak-mykhailo-lab2/API_NET6/StatsEndpoints.cs
     
      01 public static void MapStatsEndpoints(this IEndpointRouteBuilder endpoints, libraryContext db)
      02 {
      03     
      04     // Endpoint to get library statistics
      05     endpoints.MapGet("/stat", () =>
      06     {
      07         // Get the number of book titles in the library
      08         var bookTitlesCount = db.Books.Count();
      09 
      10         // Get the total number of book items
      11         var bookItemsCount = db.Items.Count();
      12 
      13         // Count of items currently on loan
      14         var itemsOnLoanCount = db.Items.Count(i => i.ReaderId.HasValue);
      15 
      16         // Count of available items
      17         var availableItemsCount = db.Items.Count(i => i.Available);
      18 
      19         // Count of items in special storage (not available and not on loan)
      20         var specialStorageCount = bookItemsCount - (itemsOnLoanCount + availableItemsCount);
      21 
      22         // Number of readers in the database
      23         var readersCount = db.Readers.Count();
      24 
      25         // Number of active readers (those with records in the usage history)
      26         var activeReadersCount = db.Hists.Select(h => h.ReaderId).Distinct().Count();
      27 
      28         // Count of popular book titles (those with records in the usage history)
      29         var popularBookTitlesCount = db.Books.Count(b => b.Items.Any(i => db.Hists.Any(h => h.ItemId == i.ItemId)));
      30 
      31         // Current time for reading time calculation
      32         var currentTime = DateTime.UtcNow;
      33 
      34         // Fetching usage history data for reading time calculation
      35         var rawData = db.Hists
      36             .Where(h => h.StatusId == 2 || h.StatusId == 3) // Filter by statuses "issued" and "returned"
      37             .ToList(); // Execute query immediately
      38 
      39         // Calculating reading time for each item
      40         var readingTimes = rawData
      41             .GroupBy(h => h.ItemId) // Group records by ItemId
      42             .Select(g => new
      43             {
      44                 ItemId = g.Key,
      45                 ReadingTime = g
      46                     .Where(h => h.StatusId == 2) // Start of reading (issued)
      47                     .Select(h => h.Time)
      48                     .DefaultIfEmpty(currentTime) // If no date, use current time
      49                     .Zip(
      50                         g.Where(h => h.StatusId == 3) // End of reading (returned)
      51                          .Select(h => h.Time)
      52                          .DefaultIfEmpty(currentTime),
      53                         (start, end) => (end - start).TotalMinutes // Calculate time in minutes
      54                     )
      55             })
      56             .SelectMany(x => x.ReadingTime) // Flatten the lists of reading times
      57             .ToList();
      58 
      59         // Average reading time
      60         var averageReadingTime = readingTimes.Any() ? readingTimes.Average() : 0;
      61 
      62         // Maximum reading time
      63         var maxReadingTime = readingTimes.Any() ? readingTimes.Max() : 0;
      64 
      65         // Return statistics in JSON format
      66         return Results.Ok(new
      67         {
      68             BookTitlesCount = bookTitlesCount, // Number of book titles
      69             BookItemsCount = bookItemsCount, // Total number of items
      70             ItemsOnLoanCount = itemsOnLoanCount, // Number of items on loan
      71             AvailableItemsCount = availableItemsCount, // Number of available items
      72             SpecialStorageCount = specialStorageCount, // Number of items in special storage
      73             ReadersCount = readersCount, // Number of readers
      74             ActiveReadersCount = activeReadersCount, // Number of active readers
      75             PopularBookTitlesCount = popularBookTitlesCount, // Number of popular book titles
      76             AverageReadingTime = averageReadingTime, // Average reading time
      77             MaxReadingTime = maxReadingTime // Maximum reading time
      78         });
      79     }).RequireAuthorization(); // Authorization required
      80 }
      
      
     В.2 Наповнення бази даних необхідними даними при запуску додатка
     Репозиторій: https://github.com/NureHmyrakMykhailo/apz-pzpi-22-8-hmyrak-mykhailo/blob/main/Lab2/pzpi-22-8-hmyrak-mykhailo-lab2/API_NET6/DatabaseVerifier.cs
     
      1 public static class DatabaseVerifier
      2 {
      3 
      4     public static void VerifyDatabase(libraryContext db)
      5     {
      6 
      7         // Check if there is at least one record in the Param table
      8         bool hasParams = db.Params.Any();
      9         if (hasParams)
      10        {
      11            Console.WriteLine("Database verification completed.");
      12        }
      13        else
      14        {
      15            Console.WriteLine("The Param table does not contain any records.
      16	Inserting a new record.");
      17 
      18            //db.Database.ExecuteSqlRaw("ALTER DATABASE CURRENT 
      19            COLLATE Cyrillic_General_CI_AI");
      20
      21            // Insert a new record with specified values
      22            var newParam = new Param
      23            {
      24                TempMax = 40,
      25                TempMin = 10,
      26                WetMax = 80,
      27                WetMin = 5
      28            };
      29 
      30            db.Params.Add(newParam);
      31            db.SaveChanges();
      32 
      33            Console.WriteLine("A new record has been inserted into the Param 
      34           table.");
      35
      36            // Insert a new admin user
      37            var adminUser = new User
      38            {
      39                Login = "admin",
      40                Email = "admin@example.com",
      41                PasswordHash = BCrypt.Net.BCrypt.HashPassword("12345"),
      42                Role = "Admin"
      43            };
      44 
      45            db.Users.Add(adminUser);
      46            db.SaveChanges();
      47 
      48            Console.WriteLine("Admin user has been inserted into the Users 
      49            table.");
      50 
      51            // Insert statuses
      52            var statuses = new List<Status>
      53                {
      54     new Status { StatusId = 1, Name = "Поступила" },
      55     new Status { StatusId = 2, Name = "Видана" },
      56     new Status { StatusId = 3, Name = "Повернута" },
      57     new Status { StatusId = 4, Name = "До архиву" },
      58     new Status { StatusId = 5, Name = "З архиву" },
      59     new Status { StatusId = 6, Name = "Коментар" },
      60     new Status { StatusId = 7, Name = "Списана" },
      61     new Status { StatusId = 8, Name = "Резерв" }
      62                };
      63 
      64            db.Statuses.AddRange(statuses);
      65            db.SaveChanges();
      66 
      67Console.WriteLine("Statuses have been inserted into the  Status 
      68            table.");
      69         }
      70    }
      71 
      72 }
     
     
     
     
     
     
     
     
     
     
     
     

     Додаток Г
     Специфікація REST
     
     API Документація для проєкту "Програмна система для автоматизації роботи бібліотек"
     
     1. BooksController API
     Маршрути
     Add Book
     POST '/api/books/admin/{userId}/add'
* Опис: Додає нову книгу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* title (String): Назва книги.
* author (String): Автор книги.
* categoryID (Long): Ідентифікатор категорії.
* isbn (String): ISBN книги.
* publicationDate (Date): Дата публікації.
* status (String): Статус доступності.
* Відповідь:
o 200 OK: Книга була успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Book By ID
     GET '/api/books/{bookID}'
* Опис: Отримує книгу за її унікальним ідентифікатором.
* Параметри запиту:
o Path:
* bookID (Long): Ідентифікатор книги.
* Відповідь:
o 200 OK: Книга знайдена.
o 404 Not Found: Книга не знайдена.
     Get All Books
     GET '/api/books'
* Опис: Отримує всі книги.
* Відповідь:
o 200 OK: Список всіх книг.
     Update Book
     PUT '/api/books/admin/{userId}/{bookID}'
* Опис: Оновлює дані книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* bookID (Long): Ідентифікатор книги.
o Body:
* title (String): Назва книги.
* author (String): Автор книги.
* categoryID (Long): Ідентифікатор категорії.
* isbn (String): ISBN книги.
* publicationDate (Date): Дата публікації.
* status (String): Статус доступності.
* Відповідь:
o 200 OK: Книга оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Книга не знайдена.
     Delete Book
     DELETE '/api/books/admin/{userId}/{bookID}'
* Опис: Видаляє книгу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* bookID (Long): Ідентифікатор книги.
* Відповідь:
o 204 No Content: Книга видалена.
o 404 Not Found: Книга не знайдена.
     
     2. ReadersController API
     Маршрути
     Add Reader
     POST '/api/readers/admin/{userId}/add'
* Опис: Додає нового читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* firstName (String): Ім'я читача.
* lastName (String): Прізвище читача.
* email (String): Електронна пошта читача.
* phone (String): Номер телефону читача.
* Відповідь:
o 200 OK: Читач був доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Reader By ID
     GET '/api/readers/{readerID}'
* Опис: Отримує читача за його ідентифікатором.
* Параметри запиту:
o Path:
* readerID (Long): Ідентифікатор читача.
* Відповідь:
o 200 OK: Читач знайдений.
o 404 Not Found: Читач не знайдений.
     Get All Readers
     GET '/api/readers'
* Опис: Отримує список всіх читачів.
* Відповідь:
o 200 OK: Список всіх читачів.
     Update Reader
     PUT '/api/readers/admin/{userId}/{readerID}'
* Опис: Оновлює дані читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* readerID (Long): Ідентифікатор читача.
o Body:
* firstName (String): Ім'я читача.
* lastName (String): Прізвище читача.
* email (String): Електронна пошта.
* phone (String): Номер телефону.
* Відповідь:
o 200 OK: Читач оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Читач не знайдений.
     Delete Reader
     DELETE '/api/readers/admin/{userId}/{readerID}'
* Опис: Видаляє читача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* readerID (Long): Ідентифікатор читача.
* Відповідь:
o 204 No Content: Читач видалений.
o 404 Not Found: Читач не знайдений.

     3 ItemsController API
     Маршрути
     Add Item
     POST '/api/items/admin/{userId}/add'
* Опис: Додає новий екземпляр книги.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* bookId (Long): Ідентифікатор книги.
* statusId (Long): Ідентифікатор статусу книги.
* barcode (String): Штрих-код екземпляра книги.
* location (String): Місцезнаходження книги.
* dateAdded (Date): Дата додавання екземпляра.
* Відповідь:
o 200 OK: Екземпляр книги успішно доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Книга або статус не знайдені.
     Get Item By ID
     GET '/api/items/{itemID}'
* Опис: Отримує екземпляр книги за його ідентифікатором.
* Параметри запиту:
o Path:
* itemID (Long): Ідентифікатор екземпляра.
* Відповідь:
o 200 OK: Екземпляр знайдений.
o 404 Not Found: Екземпляр не знайдений.
     Get All Items
     GET '/api/items'
* Опис: Отримує список всіх екземплярів книг.
* Відповідь:
o 200 OK: Список всіх екземплярів книг.
     Update Item
     PUT '/api/items/admin/{userId}/{itemID}'
* Опис: Оновлює екземпляр книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* itemID (Long): Ідентифікатор екземпляра.
o Body:
* statusId (Long): Ідентифікатор нового статусу книги.
* location (String): Оновлене місцезнаходження книги.
* Відповідь:
o 200 OK: Екземпляр оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Екземпляр або статус не знайдені.
     Delete Item
     DELETE '/api/items/admin/{userId}/{itemID}'
* Опис: Видаляє екземпляр книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* itemID (Long): Ідентифікатор екземпляра.
* Відповідь:
o 204 No Content: Екземпляр видалено.
o 404 Not Found: Екземпляр не знайдений.

     4. CategoriesController API
     Маршрути
     Add Category
     POST '/api/categories/admin/{userId}/add'
* Опис: Додає нову категорію від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* name (String): Назва категорії.
* description (String): Опис категорії.
* Відповідь:
o 200 OK: Категорія була успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Category By ID
     GET '/api/categories/{categoryID}'
* Опис: Отримує категорію за її ідентифікатором.
* Параметри запиту:
o Path:
* categoryID (Long): Ідентифікатор категорії.
* Відповідь:
o 200 OK: Категорія знайдена.
o 404 Not Found: Категорія не знайдена.
     Get All Categories
     GET '/api/categories'
* Опис: Отримує список всіх категорій.
* Відповідь:
o 200 OK: Список всіх категорій.
     Update Category
     PUT '/api/categories/admin/{userId}/{categoryID}'
* Опис: Оновлює дані категорії від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* categoryID (Long): Ідентифікатор категорії.
o Body:
* name (String): Назва категорії.
* description (String): Опис категорії.
* Відповідь:
o 200 OK: Категорія оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Категорія не знайдена.
     Delete Category
     DELETE '/api/categories/admin/{userId}/{categoryID}'
* Опис: Видаляє категорію від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* categoryID (Long): Ідентифікатор категорії.
* Відповідь:
o 204 No Content: Категорія видалена.
o 404 Not Found: Категорія не знайдена.
     
     5. StatusesController API
     Маршрути
     Add Status
     POST '/api/statuses/admin/{userId}/add'
* Опис: Додає новий статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* statusName (String): Назва статусу.
* description (String): Опис статусу.
* Відповідь:
o 200 OK: Статус успішно доданий.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Status By ID
     GET '/api/statuses/{statusID}'
* Опис: Отримує статус за його ідентифікатором.
* Параметри запиту:
o Path:
* statusID (Long): Ідентифікатор статусу.
* Відповідь:
o 200 OK: Статус знайдений.
o 404 Not Found: Статус не знайдений.
     Get All Statuses
     GET '/api/statuses'
* Опис: Отримує список всіх статусів.
* Відповідь:
o 200 OK: Список всіх статусів.
     Update Status
     PUT '/api/statuses/admin/{userId}/{statusID}'
* Опис: Оновлює статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* statusID (Long): Ідентифікатор статусу.
o Body:
* statusName (String): Назва статусу.
* description (String): Опис статусу.
* Відповідь:
o 200 OK: Статус оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Статус не знайдений.
     Delete Status
     DELETE '/api/statuses/admin/{userId}/{statusID}'
* Опис: Видаляє статус книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* statusID (Long): Ідентифікатор статусу.
* Відповідь:
o 204 No Content: Статус видалений.
o 404 Not Found: Статус не знайдений.
     
     6. UsersController API
     Маршрути
     Register User
     POST '/api/users/register'
* Опис: Реєструє нового користувача.
* Параметри запиту:
o Body:
* username (String): Ім'я користувача.
* email (String): Електронна пошта користувача.
* password (String): Пароль користувача.
* role (String): Роль користувача (наприклад, "admin", "reader").
* Відповідь:
o 200 OK: Користувач успішно зареєстрований.
o 400 Bad Request: Помилка у вхідних даних.
o 409 Conflict: Користувач з таким іменем або email вже існує.
     Login User
     POST '/api/users/login'
* Опис: Авторизує користувача.
* Параметри запиту:
o Body:
* username (String): Ім'я користувача.
* password (String): Пароль користувача.
* Відповідь:
o 200 OK: Авторизація успішна.
o 400 Bad Request: Помилка у вхідних даних.
o 401 Unauthorized: Невірний логін чи пароль.
     Get User By ID
     GET '/api/users/{userID}'
* Опис: Отримує користувача за його ідентифікатором.
* Параметри запиту:
o Path:
* userID (Long): Ідентифікатор користувача.
* Відповідь:
o 200 OK: Користувач знайдений.
o 404 Not Found: Користувач не знайдений.
     Get All Users
     GET '/api/users'
* Опис: Отримує список всіх користувачів.
* Відповідь:
o 200 OK: Список всіх користувачів.
     Update User
     PUT '/api/users/admin/{userId}/{userID}'
* Опис: Оновлює дані користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* userID (Long): Ідентифікатор користувача.
o Body:
* username (String): Ім'я користувача.
* email (String): Електронна пошта.
* role (String): Роль користувача.
* Відповідь:
o 200 OK: Користувач оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Користувач не знайдений.
     Delete User
     DELETE '/api/users/admin/{userId}/{userID}'
* Опис: Видаляє користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* userID (Long): Ідентифікатор користувача.
* Відповідь:
o 204 No Content: Користувач видалений.
o 404 Not Found: Користувач не знайдений.
     
     8. HistController API
     Маршрути
     Add History Record
     POST '/api/hist/admin/{userId}/add'
* Опис: Додає запис історії видачі книги.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* readerId (Long): Ідентифікатор читача.
* itemId (Long): Ідентифікатор екземпляра книги.
* borrowDate (Date): Дата видачі книги.
* returnDate (Date): Дата повернення книги.
* Відповідь:
o 200 OK: Запис успішно додано.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Читач або екземпляр не знайдені.
     Get History By ID
     GET '/api/hist/{histID}'
* Опис: Отримує запис історії видачі книги за його ідентифікатором.
* Параметри запиту:
o Path:
* histID (Long): Ідентифікатор запису.
* Відповідь:
o 200 OK: Запис знайдений.
o 404 Not Found: Запис не знайдений.
     Get All History
     GET '/api/hist'
* Опис: Отримує всі записи історії видачі книг.
* Відповідь:
o 200 OK: Список всіх записів.
     Update History Record
     PUT '/api/hist/admin/{userId}/{histID}'
* Опис: Оновлює запис історії видачі книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* histID (Long): Ідентифікатор запису.
o Body:
* returnDate (Date): Оновлена дата повернення книги.
* Відповідь:
o 200 OK: Запис оновлений.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Запис не знайдений.
     Delete History Record
     DELETE '/api/hist/admin/{userId}/{histID}'
* Опис: Видаляє запис історії видачі книги від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* histID (Long): Ідентифікатор запису.
* Відповідь:
o 204 No Content: Запис видалено.
o 404 Not Found: Запис не знайдений.
     
     9. PersonsController API
     Маршрути
     Add Person
     POST '/api/persons/admin/{userId}/add'
* Опис: Додає нову особу.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* firstName (String): Ім'я.
* lastName (String): Прізвище.
* dateOfBirth (Date): Дата народження.
* address (String): Адреса.
* email (String): Електронна пошта.
* Відповідь:
o 200 OK: Особа успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Person By ID
     GET '/api/persons/{personID}'
* Опис: Отримує особу за її ідентифікатором.
* Параметри запиту:
o Path:
* personID (Long): Ідентифікатор особи.
* Відповідь:
o 200 OK: Особа знайдена.
o 404 Not Found: Особа не знайдена.
     Get All Persons
     GET '/api/persons'
* Опис: Отримує список всіх осіб.
* Відповідь:
o 200 OK: Список всіх осіб.
     Update Person
     PUT '/api/persons/admin/{userId}/{personID}'
* Опис: Оновлює дані особи від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* personID (Long): Ідентифікатор особи.
o Body:
* firstName (String): Оновлене ім'я.
* lastName (String): Оновлене прізвище.
* dateOfBirth (Date): Оновлена дата народження.
* address (String): Оновлена адреса.
* email (String): Оновлена електронна пошта.
* Відповідь:
o 200 OK: Особа оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Особа не знайдена.
     Delete Person
     DELETE '/api/persons/admin/{userId}/{personID}'
* Опис: Видаляє особу від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* personID (Long): Ідентифікатор особи.
* Відповідь:
o 204 No Content: Особа видалена.
o 404 Not Found: Особа не знайдена.
     RolesController API
     Маршрути
     Add Role
     POST '/api/roles/admin/{userId}/add'
* Опис: Додає нову роль користувача.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
o Body:
* roleName (String): Назва ролі.
* description (String): Опис ролі.
* Відповідь:
o 200 OK: Роль успішно додана.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Адміністратора не знайдено.
     Get Role By ID
     GET '/api/roles/{roleID}'
* Опис: Отримує роль за її ідентифікатором.
* Параметри запиту:
o Path:
* roleID (Long): Ідентифікатор ролі.
* Відповідь:
o 200 OK: Роль знайдена.
o 404 Not Found: Роль не знайдена.
     Get All Roles
     GET '/api/roles'
* Опис: Отримує список всіх ролей.
* Відповідь:
o 200 OK: Список всіх ролей.
     Update Role
     PUT '/api/roles/admin/{userId}/{roleID}'
* Опис: Оновлює роль користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* roleID (Long): Ідентифікатор ролі.
o Body:
* roleName (String): Оновлена назва ролі.
* description (String): Оновлений опис ролі.
* Відповідь:
o 200 OK: Роль оновлена.
o 400 Bad Request: Помилка у вхідних даних.
o 403 Forbidden: Відсутність дозволу на виконання дії.
o 404 Not Found: Роль не знайдена.
     Delete Role
     DELETE '/api/roles/admin/{userId}/{roleID}'
* Опис: Видаляє роль користувача від імені адміністратора.
* Параметри запиту:
o Path:
* userId (Long): Ідентифікатор адміністратора.
* roleID (Long): Ідентифікатор ролі.
* Відповідь:
o 204 No Content: Роль видалено.
o 404 Not Found: Роль не знайдена.
     
